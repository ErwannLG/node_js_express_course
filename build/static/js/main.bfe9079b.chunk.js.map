{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","setTimeout","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACC,qBAAIC,UAAU,OAAd,UACEJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCAxBK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OAAgB,OAAZA,EACI,KAGD,qBAAKJ,UAAU,QAAf,SAAwBI,K,gBCJ1BC,EAAU,aAuBD,EArBA,WACd,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CACnBC,GAAI,IACJT,QAAS,mCACTU,KAAM,2BACNZ,WAAW,GAEZ,OAAOO,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAazC,EAVA,SAACO,GAEf,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ7B,EALA,SAACJ,EAAIM,GAEnB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SChBtCK,EAAS,WAMd,OACC,sBAAKC,MANc,CACnBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACC,uBACA,2GAuFYC,EAhFH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEaF,mBAAS,iBAFtB,mBAEVG,EAFU,KAEDC,EAFC,OAGaJ,oBAAS,GAHtB,mBAGVK,EAHU,KAGDC,EAHC,OAIuBN,mBAAS,MAJhC,mBAIVO,EAJU,KAIIC,EAJJ,KAMjBC,qBAAU,WACTC,IAAqBvB,MAAK,SAACwB,GAC1BT,EAASS,QAER,IAEH,IAuCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAC1C,GAAD,OAAUA,EAAKG,aAElE,OACC,gCACC,uCACA,cAAC,EAAD,CAAcK,QAAS4B,IACvB,8BACC,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACOA,EAAU,YAAc,WAGhC,6BACEO,EAAYE,KAAI,SAAC3C,GAAD,OAChB,cAAC,EAAD,CAECA,KAAMA,EACNC,iBAAkB,kBAvDI,SAACa,GAC3B,IAAMd,EAAO8B,EAAMc,MAAK,SAAC5C,GAAD,OAAUA,EAAKc,KAAOA,KACxC+B,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACSzB,EAAI+B,GACX7B,MAAK,SAAC8B,GACNf,EAASD,EAAMa,KAAI,SAAC3C,GAAD,OAAWA,EAAKc,KAAOA,EAAKd,EAAO8C,SAEtDC,OAAM,SAACC,GACPX,EAAgB,SAAD,OACLrC,EAAKK,QADA,sCAGf4C,YAAW,WACVZ,EAAgB,QACd,KACHN,EAASD,EAAMY,QAAO,SAACQ,GAAD,OAAOA,EAAEpC,KAAOA,SAuCZqC,CAAmBnD,EAAKc,MAF3Cd,EAAKc,SAMb,uBAAMsC,SAvCQ,SAACC,GAChBA,EAAMC,iBACN,IAAMC,EAAa,CAClBlD,QAAS2B,EACTjB,MAAM,IAAIyC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG5BpB,EAAmBgB,GAAYvC,MAAK,SAAC8B,GACpCf,EAASD,EAAMX,OAAO2B,IACtBb,EAAW,QA6BX,UACC,uBAAO2B,MAAO5B,EAAS6B,SA1BD,SAACR,GACzBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB3B,EAAWoB,EAAMW,OAAOJ,UAyBtB,wBAAQK,KAAK,SAAb,qBAED,cAAC,EAAD,Q,MC5FHC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bfe9079b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n\tconst label = note.important ? \"make not important\" : \"make important\";\n\n\treturn (\n\t\t<li className=\"note\">\n\t\t\t{note.content}\n\t\t\t<button onClick={toggleImportance}>{label}</button>\n\t\t</li>\n\t);\n};\n\nexport default Note;\n","const Notification = ({ message }) => {\r\n\tif (message === null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n\tconst request = axios.get(baseUrl);\r\n\tconst nonExisting = {\r\n\t\tid: 10000,\r\n\t\tcontent: \"This note is not saved to server\",\r\n\t\tdate: \"2019-05-30T17:30:31.098Z\",\r\n\t\timportant: true,\r\n\t};\r\n\treturn request.then((response) => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = (newObject) => {\r\n\tconst request = axios.post(baseUrl, newObject);\r\n\treturn request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject);\r\n\treturn request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\n\nconst Footer = () => {\n\tconst footerStyle = {\n\t\tcolor: \"green\",\n\t\tfontStyle: \"italic\",\n\t\tfontSize: 16,\n\t};\n\treturn (\n\t\t<div style={footerStyle}>\n\t\t\t<br />\n\t\t\t<em>\n\t\t\t\tNote app, Department of Computer Science, University of Helsinki 2021\n\t\t\t</em>\n\t\t</div>\n\t);\n};\n\nconst App = () => {\n\tconst [notes, setNotes] = useState([]);\n\tconst [newNote, setNewNote] = useState(\"a new note...\");\n\tconst [showAll, setShowAll] = useState(true);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\n\tuseEffect(() => {\n\t\tnoteService.getAll().then((initialNotes) => {\n\t\t\tsetNotes(initialNotes);\n\t\t});\n\t}, []);\n\n\tconst toggleImportanceOf = (id) => {\n\t\tconst note = notes.find((note) => note.id === id);\n\t\tconst changedNote = { ...note, important: !note.important };\n\n\t\tnoteService\n\t\t\t.update(id, changedNote)\n\t\t\t.then((returnedNote) => {\n\t\t\t\tsetNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetErrorMessage(\n\t\t\t\t\t`Note '${note.content}' was already deleted from server`\n\t\t\t\t);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetErrorMessage(null);\n\t\t\t\t}, 5000);\n\t\t\t\tsetNotes(notes.filter((n) => n.id !== id));\n\t\t\t});\n\t};\n\n\tconst addNote = (event) => {\n\t\tevent.preventDefault();\n\t\tconst noteObject = {\n\t\t\tcontent: newNote,\n\t\t\tdate: new Date().toISOString(),\n\t\t\timportant: Math.random() < 0.5,\n\t\t};\n\n\t\tnoteService.create(noteObject).then((returnedNote) => {\n\t\t\tsetNotes(notes.concat(returnedNote));\n\t\t\tsetNewNote(\"\");\n\t\t});\n\t};\n\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log(event.target.value);\n\t\tsetNewNote(event.target.value);\n\t};\n\n\tconst notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Notes</h1>\n\t\t\t<Notification message={errorMessage} />\n\t\t\t<div>\n\t\t\t\t<button onClick={() => setShowAll(!showAll)}>\n\t\t\t\t\tshow {showAll ? \"important\" : \"all\"}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<ul>\n\t\t\t\t{notesToShow.map((note) => (\n\t\t\t\t\t<Note\n\t\t\t\t\t\tkey={note.id}\n\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\ttoggleImportance={() => toggleImportanceOf(note.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t\t<form onSubmit={addNote}>\n\t\t\t\t<input value={newNote} onChange={handleNoteChange} />\n\t\t\t\t<button type=\"submit\">save</button>\n\t\t\t</form>\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}